name: Create Release

on:
  pull_request:
    types:
      - closed
    branches:
      - 'main'

jobs:
  create-release:
    if: github.event.pull_request.merged == true && (github.event.pull_request.title == 'Trigger minor release' || github.event.pull_request.title == 'Trigger patch release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: 'main'
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get last release version
        id: get_last_release_version
        run: |
          LAST_RELEASE_VERSION=$(git tag -l --sort=-version:refname | head -n 1)
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "last_release_version=$LAST_RELEASE_VERSION" >> $GITHUB_OUTPUT
          if [ -n "$LAST_RELEASE_VERSION" ] && [ "$LAST_RELEASE_VERSION" != "$CURRENT_VERSION" ]; then
            npm version --no-git-tag-version $LAST_RELEASE_VERSION
          fi

      - name: Increment patch version
        if: github.event.pull_request.title == 'Trigger patch release'
        run: |
          echo "Incrementing patch version..."
          npm version --no-git-tag-version patch
          
      - name: Increment minor version
        if: github.event.pull_request.title == 'Trigger minor release'
        run: |
          echo "Incrementing minor version..."
          npm version --no-git-tag-version minor

      - name: Create release
        id: create_release
        run: |
          RELEASE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_BRANCH="release/$RELEASE_VERSION"
          git checkout -b "$RELEASE_BRANCH"
          git commit -am "Release $RELEASE_VERSION"
          git tag "$RELEASE_VERSION"
          git push origin "$RELEASE_BRANCH"
          git push origin "$RELEASE_VERSION"
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
          gh pr create --base main --head "$RELEASE_BRANCH" --title "Finish release $RELEASE_VERSION" --body "Automated release PR" --label "release-creation"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_release.outputs.release_version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
